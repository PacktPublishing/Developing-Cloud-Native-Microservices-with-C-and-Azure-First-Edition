// <auto-generated />
using System;
using DBDriver;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace RoutesPlanningDBDriver.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20241217103640_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoutesPlanningDBDriver.Entities.OutputQueueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MessageCode")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadyTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReadyTime");

                    b.ToTable("OutputQueueItems");
                });

            modelBuilder.Entity("RoutesPlanningDBDriver.Entities.RouteOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<LineString>("Path")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("When");

                    b.ToTable("RouteOffers");
                });

            modelBuilder.Entity("RoutesPlanningDBDriver.Entities.RouteRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WhenEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WhenStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("WhenEnd");

                    b.HasIndex("WhenStart");

                    b.ToTable("RouteRequests");
                });

            modelBuilder.Entity("RoutesPlanningDBDriver.Entities.RouteOffer", b =>
                {
                    b.OwnsOne("RoutesPlanningDomainLayer.Models.BasicTypes.UserBasicInfo", "User", b1 =>
                        {
                            b1.Property<Guid>("RouteOfferId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("RouteOfferId");

                            b1.ToTable("RouteOffers");

                            b1.WithOwner()
                                .HasForeignKey("RouteOfferId");
                        });

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("RoutesPlanningDBDriver.Entities.RouteRequest", b =>
                {
                    b.HasOne("RoutesPlanningDBDriver.Entities.RouteOffer", "Route")
                        .WithMany("Requests")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("RoutesPlanningDomainLayer.Models.BasicTypes.TownBasicInfo", "Destination", b1 =>
                        {
                            b1.Property<Guid>("RouteRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Point>("Location")
                                .IsRequired()
                                .HasColumnType("geography");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RouteRequestId");

                            b1.ToTable("RouteRequests");

                            b1.WithOwner()
                                .HasForeignKey("RouteRequestId");
                        });

                    b.OwnsOne("RoutesPlanningDomainLayer.Models.BasicTypes.TownBasicInfo", "Source", b1 =>
                        {
                            b1.Property<Guid>("RouteRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Point>("Location")
                                .IsRequired()
                                .HasColumnType("geography");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RouteRequestId");

                            b1.ToTable("RouteRequests");

                            b1.WithOwner()
                                .HasForeignKey("RouteRequestId");
                        });

                    b.OwnsOne("RoutesPlanningDomainLayer.Models.BasicTypes.UserBasicInfo", "User", b1 =>
                        {
                            b1.Property<Guid>("RouteRequestId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("RouteRequestId");

                            b1.ToTable("RouteRequests");

                            b1.WithOwner()
                                .HasForeignKey("RouteRequestId");
                        });

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("Source")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("RoutesPlanningDBDriver.Entities.RouteOffer", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
